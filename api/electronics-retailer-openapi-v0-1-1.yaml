openapi: 3.0.3
info:
  title: Byte Bazaar Digital OpenAPI Specification
  description: >-
    Some useful links:

    - [The Electronics Retailer
    repository](https://github.com/BBDElectronicStore/BBD)
  contact:
    email: adrian.hawkins@bbd.co.za
  version: 0.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://api.bbd.electronic-retailer.com
tags:
  - name: Byte Bazaar Digital
    description: Buy your "Devices" From us (who else LOL)
paths:
  /store/inventory:
    get:
      tags:
        - store
      summary: Get the amount of inventory the Business has
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
        '503':
          description: service unavailable
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${get-inventory-lambda-arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
  /store/order:
    post: # TODO look at this cause the request body is wrong (we don't get a whole order object)
      tags:
        - store
      summary: Place an order for a device
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: order has been successfully created
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
        '400':
          description: Invalid input
        '422':
          description: Validation Exception
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${create-order-lambda-arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404': # Also used for when a user isn't authorised to do this
          description: Order not found
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${get-order-lambda-arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    put:
      tags:
        - store
      summary: Cancel purchase order by ID
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: All Good
        '400':
          description: Invalid ID supplied
        '404': # Also used for when a user isn't authorised to do this
          description: Order not found
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${delete-order-lambda-arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
  /customer:
    post:
      tags:
        - customer
      summary: Create customer - so that they can buy from us
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer Successfully Created
        '400':
          description: The client performed an incorrect action (either the wrong banking details or already has an account)
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${create-customer-lambda-arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    get:
      tags:
        - customer
      summary: Get all the customer and their order history
      responses:
        '200':
          description: Customer Successfully Created (Plus a list of the customer and their order history)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          description: This endpoint is only available to the Admin portal and not the other services
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${get-customer-lambda-arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
  /customer/{customerId}:
    put:
      tags:
        - customer
      summary: update the banking details of a customer using their ID
      parameters:
        - name: customerId
          in: path
          description: ID of the customer to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Customer new banking details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankingDetails'
      responses:
        '200':
          description: Details updated
        '400':
          description: The client performed an incorrect action (probably invalid banking details)
      x-amazon-apigateway-integration:
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${update-customer-lambda-arn}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
components:
  schemas:
    Product:
      type: object
      properties:
        id:
            type: integer
            format: int64
            example: 10
        price:
            type: integer
            format: int64
            example: 10
        vat:
            type: integer
            format: int64
            example: 3
        name:
            type: string
            example: device
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        customerId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate: # TODO talk to hand of zeus about getting the current time
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - pending
            - approved
            - complete # If the person says they got it
            - denied
            - cancelled
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: Bob
        banking-details:
          $ref: '#/components/schemas/BankingDetails'
      xml:
        name: customer
    BankingDetails:
      type: string
      example: fgh239nzx82y3b
  securitySchemes: # TODO Security - to be determined
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header